Iterative:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* dummy = new ListNode(-1);
        dummy -> next = head;
        ListNode* pre = dummy;
        while(head != NULL && head -> next != NULL)
        {
            ListNode* first = head;
            ListNode* second = head -> next;
            
            first -> next = second -> next;
            second -> next = first;
            pre->next = second;
            
            pre = first;
            head = head -> next;
        }
        return dummy -> next;
    }
};
.................................................................

Recursive:

class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* dummy = new ListNode(-1);
        dummy -> next = head;
        ListNode* pre = dummy;
        helper(head, pre);
        return dummy -> next;
    }
    void helper(ListNode* head, ListNode* pre)
    {
        if(head != NULL && head -> next != NULL)
        {
            ListNode* first = head;
            ListNode* second = head -> next;
            
            first -> next = second -> next;
            second -> next = first;
            pre->next = second;
            
            pre = first;
            head = head -> next;
            
            helper(head, pre);
        }
    }
};

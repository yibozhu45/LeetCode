the point is to compare mid with mid + 1

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int mid, l = 0;
        int r = nums.size()-1;
        
        while(l < r)
        {
            mid = (r -l)/2 + l;
            
            if(nums[mid] > nums[mid + 1])
            {
                r = mid;
            }
            else
            {
                l = mid + 1;
            }
            
        }
        cout << r << " " << l;
        return r;
    }
};
....................................................
recursive:

class Solution {
public:
    // find a peak in [l, r)
   int bsearch(vector<int>& nums, int l, int r) {
        if (l >= r - 1) {
            return l;
        }

        int m = (r - l) / 2 + l;

        if ((m + 1 >= r || nums[m] > nums[m + 1]) && (m - 1 < 0 || nums[m] > nums[m - 1]))
            return m;
        else if (m + 1 >= r || nums[m] > nums[m + 1]) {
            // decreasing, peak on the left side
            return bsearch(nums, l, m);
        }
        else  {
            return bsearch(nums, m + 1, r);
        }

    }
    
    int findPeakElement(vector<int>& nums) {
        return bsearch(nums, 0, nums.size()); 
    }
};

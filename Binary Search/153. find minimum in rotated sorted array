//think more, think clear, improve the thought

class Solution {
public:
    int findMin(vector<int>& nums) {
        if(nums.size() == 1) return nums[0];
        int mid, l = 0;
        int r = nums.size() -1;
        if(nums[l] <= nums[r])
            return nums[l];
        
        while(l <= r)
        {
            mid = (r-l)/2 + l;
            
        // if the mid element is greater than its next element then mid+1 element is the smallest
        // This point would be the point of change. From higher to lower value.
        if (nums[mid] > nums[mid + 1]) {
            return nums[mid + 1];
            }
            
        // if the mid element is lesser than its previous element then mid element is the smallest
        if (nums[mid - 1] > nums[mid]) {
            return nums[mid];
            }
            
        if (nums[mid] > nums[0]) {
                l = mid + 1;
            } else {
        // if nums[0] is greater than the mid value then this means the smallest value is somewhere to
        // the left
                r = mid - 1;
            }
            /*
            if(nums[mid] < nums[mid + 1] && nums[mid] < nums[mid -1])
            {
                return nums[mid];
            }
            else if(nums[mid-1] > nums[nums.size() -1] && nums[mid] > nums[mid -1])
            {
                l = mid +1;
            }
            else if(nums[mid] < nums[nums.size() -1] && nums[mid] > nums[mid -1] )
            {
                r = mid -1;
            }
            */
     
        }
        
        return -1;
    }
};

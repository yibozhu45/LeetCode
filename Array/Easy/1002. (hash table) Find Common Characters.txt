Idea: select the first word as a example, for the next one, comparing to the first one, then choose the minimized map value. 

auto& it : map : it can modify the map inside a loop. If don't have &, out of loop, map stay the same.

Mine:
class Solution {
public:
    vector<string> commonChars(vector<string>& A) {
        map<char, int> mp0;
        vector<string> result;
        
        for(auto c : A[0])//first word in A
        {
            mp0[c]++;
        }
        
        map<char, int> mp;
        for(int i = 1; i < A.size(); i++)
        {
            mp.clear();
            for(auto c : A[i])
            {
                mp[c]++;
            }
            
            for(auto& it : mp0)//it should modify mp0
            {
                auto c = mp.find(it.first);
                if(c != mp.end())
                {
                    it.second = min(it.second, c -> second);
                }
                else
                {
                    it.second = 0;
                }
            }
        }
        
        for(auto m : mp0)
        {
            while(m.second != 0)
            {
                string s(1, m.first);//convert char to string
                result.push_back(s);
                m.second--;
            }
        }
        
        return result;
    }
};

/////////////////////////////////////////////////////////////////////////////////////
Disscusion:

class Solution {
public:
    vector<string> commonChars(vector<string>& A) {
        map<char,int> ans;
        for(auto ch: A[0]){
            ans[ch]++;
        }
        
        map<char,int>cur;
        for(auto word:A){
            cur.clear();
            for(auto ch:word){
                cur[ch]++;
            }
            for(auto& it:ans){//it - pair
                it.second = min(it.second,cur[it.first]);//if 'a' in ans, but not in cur, cur[it.first] = 0;
            }
        }
        vector<string> sol;
        string s;
        for(auto it:ans){
            while(it.second!=0){
                s=it.first;
                sol.push_back(s);
                it.second--;
            }
        }
        return sol;
    }
};
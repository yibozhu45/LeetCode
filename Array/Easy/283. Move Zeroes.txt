idea: find all "0" element, count the number, delete them, then add same number of "0" to the end.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int count = 0;
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i]== 0)
            {
                count++;
            }
        }
        
        for(int i = 0; i < count; i++)
        {
            auto it = find(nums.begin(), nums.end(), 0);
            nums.erase(it);
            nums.push_back(0);
        }
           
    }
};

/////////////////////////////////////////////////////////
idea: if it is 0, do nothing. if it isn't 0, check if the front element is 0 or not. If it's 0, move recent element forward.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] != 0)
            {
                int j = i;
                while(j != 0)
                {
                    j--;
                    if(nums[j] == 0)
                        swap(nums[j+1],nums[j]);
                }
            }
        }
    }
};
/////////////////////////////////////////////////////////
idea: replace value 0 with not 0 value, use nz to mark the current position, then change the position after nz to 0

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int nz=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                nums[nz]=nums[i];
                nz++;
            }
        }
        for(int i=nz;i<n;i++){
            nums[i]=0;
        }
    }
};
Two pointer: one is k, one is i, all start from 0. If nums[i] = 0, k not move, i move forward. If nums[i] != 0, nums[k] = nums[i], k++.
So, if nums has one zero, i will be one index quicker than k.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int k = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] != 0)
            {
                nums[k] = nums[i];
                k++;
            }   
        }
        
        for(int i = k; i < nums.size(); i++)
        {
            nums[i] = 0;
        }
    }
};
/////////////////////////////////////////////////////////
idea: find all "0" element, count the number, delete them, then add same number of "0" to the end.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int count = 0;
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i]== 0)
            {
                count++;
            }
        }
        
        for(int i = 0; i < count; i++)
        {
            auto it = find(nums.begin(), nums.end(), 0);
            nums.erase(it);
            nums.push_back(0);
        }
           
    }
};

/////////////////////////////////////////////////////////
idea: if it is 0, do nothing. if it isn't 0, check if the front element is 0 or not. If it's 0, move recent element forward.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] != 0)
            {
                int j = i;
                while(j != 0)
                {
                    j--;
                    if(nums[j] == 0)
                        swap(nums[j+1],nums[j]);
                }
            }
        }
    }
};

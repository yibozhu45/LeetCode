Brute force:

class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int res = nums.size();
        
        //check res is existed or not 
        int n = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            n += nums[i];
        }
        if(n < s) return 0;
        
        for(int i = 0; i < nums.size(); i++)
        {
            int j = i;
            int count = 0, sum = 0;
            while(sum < s && j < nums.size())
            {
                sum += nums[j];
                count ++;
                j++;
            }
            if(count < res && sum >= s)
            {
                res = count;
            }
        }
        return res;
    }
};
........................................................

https://leetcode.com/problems/minimum-size-subarray-sum/discuss/59090/C%2B%2B-O(n)-and-O(nlogn)

two pointer:

int minSubArrayLen(int s, vector<int>& nums)
{
    int n = nums.size();
    int ans = INT_MAX;
    int left = 0;
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += nums[i];
        while (sum >= s) {
            ans = min(ans, i + 1 - left);
            sum -= nums[left++];
        }
    }
    return (ans != INT_MAX) ? ans : 0;
}
........................................................
binary search:

int minSubArrayLen(int s, vector<int>& nums)
{
    int n = nums.size();
    if (n == 0)
        return 0;
    int ans = INT_MAX;
    vector<int> sums(n + 1, 0); //size = n+1 for easier calculations
    //sums[0]=0 : Meaning that it is the sum of first 0 elements
    //sums[1]=A[0] : Sum of first 1 elements
    //ans so on...
    for (int i = 1; i <= n; i++)
        sums[i] = sums[i - 1] + nums[i - 1];
    for (int i = 1; i <= n; i++) {
        int to_find = s + sums[i - 1];
        auto bound = lower_bound(sums.begin(), sums.end(), to_find);
        if (bound != sums.end()) {
            ans = min(ans, static_cast<int>(bound - (sums.begin() + i - 1)));
        }
    }
    return (ans != INT_MAX) ? ans : 0;
}

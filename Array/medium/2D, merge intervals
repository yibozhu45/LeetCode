56. merge intervals

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.size() <= 1) return intervals;
        
        vector<vector<int>> result;
        sort(intervals.begin(), intervals.end(), [](vector<int> a, vector<int> b){return a[0]<b[0];});
        
        result.push_back(intervals[0]);
        
        for(int i = 1; i < intervals.size(); i++)
        {
            if(intervals[i][0] > result.back()[1]){
                result.push_back(intervals[i]);
            }
            else
            {
                result.back()[1] = max(result.back()[1], intervals[i][1]);
            }
        }
        
        return result;
        
    }
};
........................................................................................................

252. Meeting Rooms

class Solution {
public:
    bool canAttendMeetings(vector<vector<int>>& intervals) {
       if(intervals.size() <= 1) return true;
        
        sort(intervals.begin(), intervals.end(), [](vector<int> a, vector<int> b){return a[0] < b[0];});
        
        for(int i = 1; i < intervals.size(); i++)
        {
            if(intervals[i][0] < intervals[i-1][1]) return false;
        }
        return true;
    }
};

class Solution {
    struct compare_int {
        bool operator()(const vector<int>& l, const vector<int>& r) {
            return l[0] < r[0];
        }
    };
public:
    bool canAttendMeetings(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end(), compare_int());
        
        for(int i=1; i<intervals.size(); ++i) {
            if (intervals[i][0] < intervals[i-1][1]) return false;
        }
        
        return true;
    }
};

.................................................................................
435. Non-overlapping Intervals

*different way to write compare*

bool comp(vector<int> &a,vector<int> &b) {
	return a[1]<b[1];
}

class Solution {   
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if(intervals.size() <= 1) return 0;
        
        sort(intervals.begin(), intervals.end(), comp);
        
        int count = 1, end = intervals[0][1];
        for(int i = 1; i < intervals.size(); i++)
        {
            if(intervals[i][0] >= end) 
            {
                end = intervals[i][1];
                count++;
            }
        }
        return intervals.size() - count;
    }
};

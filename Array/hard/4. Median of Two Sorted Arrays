class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> v;
        double res = 0;
        int i = 0; int j = 0;
        while(i < nums1.size() && j < nums2.size())
        {
            if(nums1[i] < nums2[j])
            {
                v.push_back(nums1[i]);
                i++;
            }
            else if(nums1[i] > nums2[j])
            {
                v.push_back(nums2[j]);
                j++;
            }
            else
            {
                v.push_back(nums1[i]);
                i++;
                v.push_back(nums2[j]);
                j++;
            }
        }
        
        if(i < nums1.size())
        {
            for(i ; i < nums1.size(); i++)
            {
                v.push_back(nums1[i]);
            }
        }
        if(j < nums2.size())
        {
            for(j; j < nums2.size(); j++)
            {
                v.push_back(nums2[j]);
            }
        }

        if(v.size() == 0) return 0.0;
        if(v.size() == 1) return v[0];
        
        int mid = (v.size() -1)/2;
        if(v.size() % 2 == 1)
        {
            return v[mid];
        }
        else
        {
            res = double(v[mid] + v[mid + 1])/2;
            return res;
        }
    }
};
......................................................
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        
        
        
        
        int n = n1 + n2;
        int k;
        if (n % 2 == 0)
            k = n / 2;
        else
            k = n / 2 + 1;
        
        
        
        int lo = 0, hi = k;
        int mid = lo + (hi - lo) / 2;
        while (lo != hi)
        {
            int i, j;
                    
            //cout << "Trying hi,lo,mid = " << hi << " " << lo << " " << mid << endl;
            
            if (mid > n1)
                i = n1 - 1, j = k - n1 - 1;
            else if (k - mid > n2)
                j = n2 - 1, i = k - n2 - 1;
            else
                i = mid - 1, j = k - mid - 1;
            
            //cout << "Trying i,j = " << i << " " << j << endl;

            if (i == -1)
            {
                // We're done
                if (nums1.empty() || nums1[0] >= nums2[j])
                    break;
                else
                    // Take less of nums2
                    lo = mid + 1, mid = lo + (hi - lo) / 2;     
            }
            else if (j == -1)
            {
                // We're done
                if (nums2.empty() ||  nums2[0] >= nums1[i])
                    break;
                else
                    // Take less of nums1
                    hi = mid - 1, mid = lo + (hi - lo) / 2;                      
            }
            // Which array has largest end?
            else if (nums1[i] > nums2[j])
            {
                // We're done
                if (j == n2 - 1 || nums2[j + 1] >= nums1[i])
                    break;
                else
                    // Take less of nums1
                    hi = mid - 1, mid = lo + (hi - lo) / 2;                
            }
            else
            {
                // We're done
                if (i == n1 - 1 || nums1[i + 1] >= nums2[j])
                    break;
                else
                    // Take less of nums2
                    lo = mid + 1, mid = lo + (hi - lo) / 2;                  
            } 
        }
        
        //cout << "Found mid = " << mid << endl;
        {
            int i, j;
            if (mid > n1)
                i = n1 - 1, j = k - n1 - 1;
            else if (k - mid > n2)
                j = n2 - 1, i = k - n2 - 1;
            else
                i = mid - 1, j = k - mid - 1;
            
            //cout << "Found i,j = " << i << " " << j << endl;
            
            double median1 = max(i == -1?-1:nums1[i], j==-1?-1:nums2[j]);
            
            if (n % 2) 
                return median1;

            // One extra step
            double result = 0.5 * median1;
            
            //cout << "Extra step i,j = " << i << " " << j << endl;
            int lastEl2;
            // One more if necessary
            
            if (j == n2 - 1)
                result += 0.5 * nums1[i + 1];
            else if (i == n1 - 1)
                result += 0.5 * nums2[j + 1];
            else if (nums1[i + 1] <= nums2[j + 1])
                result += 0.5 * nums1[i + 1];
            else 
                result += 0.5 * nums2[j + 1];

            return result;
        
        }
        
            
            
            
        return 0;
    }
};

Using recursion is to traverse the tree. 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> v;
    
    void helper(TreeNode* node) {
        if(node != NULL)
        {
            
        if(node->left == NULL&&node->right != NULL)
        {
            v.push_back(node -> right -> val);
        }
        else if(node->right == NULL&&node->left != NULL)
        {
            v.push_back(node -> left -> val);
        }
            helper(node->left);
            helper(node->right);
        }
        
    }
    
    vector<int> getLonelyNodes(TreeNode* root) {
        helper(root);
        return v;    
    }
};

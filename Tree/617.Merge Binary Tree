Recursive 必须在同一层，不同层会穿插不行

If at any step, one of these children happens to be null, 
we return the child of the other tree(representing the 
corresponding child subtree) to be added as a child subtree 
to the calling parent node in the first tree. 

class Solution {
public: 
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1 == NULL)
            return t2;
        if(t2 == NULL)
            return t1;
        t1->val += t2->val;
        t1 -> left = mergeTrees(t1 -> left, t2 -> left);
        t1 -> right = mergeTrees(t1 -> right, t2 -> right);
        
        return t1;
            
    }
};
............................................................
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) 
    {
        if(t1==NULL && t2==NULL)
        {
            return NULL;
        }
        
        int l=0;
        
        if(t1!=NULL && t2!=NULL)
           l=t1->val + t2->val;
        else 
        {
            if(t1==NULL) 
             l=t2->val;
        
        else 
        {
            if (t2==NULL) 
                l=t1->val;
        }
        }
        
        TreeNode *root=new TreeNode(l);
        
        root->left=mergeTrees((t1!=NULL)?t1->left:NULL,(t2!=NULL)?t2->left:NULL);
        root->right=mergeTrees((t1!=NULL)?t1->right:NULL,(t2!=NULL)?t2->right:NULL);
        
        return root;
    }
};

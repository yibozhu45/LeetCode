why pass vector, why it works?

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//use return, in the same function
class Solution {
public:
    TreeNode *sortedArrayToBST(vector<int> &num) {
        if(num.size() == 0) return NULL;
        if(num.size() == 1)
        {
            return new TreeNode(num[0]);
        }
        
        int middle = num.size()/2;
        TreeNode* root = new TreeNode(num[middle]);
        
        vector<int> leftInts(num.begin(), num.begin()+middle);
        vector<int> rightInts(num.begin()+middle+1, num.end());
        
        root->left = sortedArrayToBST(leftInts);
        root->right = sortedArrayToBST(rightInts);
        
        return root;
    }
};
..............................................................................
class Solution {
public:
    TreeNode* construct(vector<int>& nums, int l, int r){
        if(l<=r){
            int mid = (l+r)/2;
            TreeNode* root = new TreeNode(nums[mid]);
        root->left = construct(nums, l, mid-1);
        root->right = construct(nums,mid+1,r);
        return root;
        }else{
            return NULL;
        } 
    }
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.size()==0) return NULL;
        int mid = (nums.size())/2;
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = construct(nums, 0, mid-1);
        root->right = construct(nums,mid+1,nums.size()-1);
        
        return root;
    }
};

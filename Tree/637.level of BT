Using Depth First Search
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//get the index of level, helper(i + 1, root)
class Solution {
public:
    vector<double> sum;
    vector<int> count;
   
    //void return!//int& i no!
    void helper(TreeNode* root, int i)
    {
        if(root == NULL) return;
        else
        {
            if(i < sum.size())
            {
                sum[i] += root -> val;
                count[i]++; 
            }
            else//new level element
            {
                sum.push_back(root-> val * 1.0);
                count.push_back(1); 
            }
            helper(root-> right, i+1);
            helper(root -> left, i+1);
        }
    }
    
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> res;
        helper(root, 0);
        for(int i = 0; i < sum.size(); i++)
        {
            res.push_back(sum[i]/count[i]);
        }
        return res;
    }
};
//Time complexity : O(n)O(n). The whole tree is traversed once only. Here, nn refers to the total number of nodes in the given binary tree.

//Space complexity : O(h)O(h). resres and countcount array of size hh are used. Here, hh refers to the height(maximum number of levels) of 
the given binary tree. Further, the depth of the recursive tree could go upto hh only.

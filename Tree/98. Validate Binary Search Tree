public:
  bool isValidBST(TreeNode* root, long min = LONG_MIN, long max = LONG_MAX) {
    if (root == NULL) return true;
    if (root->val <= min || root->val >= max) return false;
    return isValidBST(root->left, min, root->val) && isValidBST(root->right, root->val, max);
  }
};
.............................................................................................
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /* Use inorder traversal to check if BST or not. The entire traversal need not be maintained to check if it is valid inorder/ascending order array. Just make sure that the previous element is less than the current element. So nly preserve address of previous node. */
    bool isValidBST(TreeNode* root) {
        TreeNode* prev = NULL;
        return validate(root, prev);
    }
    
    bool validate(TreeNode* node, TreeNode* &prev) {
        /* Inorder - left, right  root */
        /* Exit case */
        if (node == NULL) return true;
        
        /* Left */
        if (!validate(node->left, prev)) return false;
        
        /* Root - remember to save current node as prev for next iteration */
        if (prev != NULL && prev->val >= node->val) return false;
        prev = node;
        
        /* Right */
        return validate(node->right, prev);
    }
};

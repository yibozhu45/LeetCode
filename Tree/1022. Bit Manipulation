/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 
 If you work with binaries 1 -> 1 -> 3, it's, you start from curr_number = 1, then shift one register to the left and add the next digit: curr_number = (1 << 1) | 1 = 3.
 */
class Solution {
public:
    int sum = 0;
    void helper(TreeNode* root, int i)
    {
        if(root != NULL)
        {
            //put on the top, if you want it do every step
            i = (i << 1 | root -> val);
            helper(root -> left, i);
            helper(root -> right, i);
            
            if(root -> left == NULL && root -> right == NULL)
                sum += i;
        }
        
    }
    
    int sumRootToLeaf(TreeNode* root) {
        
        helper(root, 0);
        return sum;
    }
};

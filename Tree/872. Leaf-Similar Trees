/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 [3,5,1,6,2,9,8,null,null,7,4]
[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
 */
class Solution {
public:
    vector<int> r1;
    vector<int> r2;
    void helper1(TreeNode* root)
    {
        if(root != NULL)
        {
            if(root -> right == NULL && root -> left == NULL)
            {
                r1.push_back(root -> val);
            }
            helper1(root -> right);
            helper1(root -> left);
        }
        
    }
    
    void helper2(TreeNode* root)
    {
        if(root != NULL)
        {
        if(root -> right == NULL && root -> left == NULL)
            {
                r2.push_back(root -> val);
            }
            helper2(root -> right);
            helper2(root -> left);
        }
    }
    
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        helper1(root1);
        helper2(root2);
        if(r1.size() != r2.size())
        {
            return false;
        }
        else
        {
            for(int i = 0; i < r1.size(); i++)
            {
                if(r1[i] != r2[i])
                {
                    return false;
                }
            }
            return true;
        }
    }
};

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        map<string, vector<string>> mp;
        
        for(auto i : strs)
        {
            string t = i;
            sort(t.begin(), t.end());
            mp[t].push_back(i);
        }
        
        vector<vector<string>> ans;
        
        for(auto it : mp)
        {
            ans.push_back(it.second);
        }
        
        return ans;
    }
};

Use an unordered_map to group the strings by their sorted counterparts. Use the sorted string as the key and all anagram strings as the value.

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> mp;
        for (string s : strs) {
            string t = s; 
            sort(t.begin(), t.end());
            mp[t].push_back(s);
        }
        vector<vector<string>> anagrams;
        for (auto p : mp) { 
            anagrams.push_back(p.second);
        }
        return anagrams;
    }
};
................................................................

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        map<string, vector<string>> mp;
        
        for(auto i : strs)
        {
            mp[strSort(i)].push_back(i);
        }
        
        vector<vector<string>> ans;
        
        for(auto it : mp)
        {
            ans.push_back(it.second);
        }
        
        return ans;
    }
private:
    string strSort(string s)
    {
        vector<int> counter(26,0);
        for(char c: s)
        {
            counter[c - 'a']++;
        }
        string t;
        for(int i = 0; i < 26; i++)
        {
            t += string(counter[i], i + 'a');
        }
        return t;
    }
};

Moreover, since the string only contains lower-case alphabets, we can sort them using counting sort to improve the time complexity.

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> mp;
        for (string s : strs) {
            mp[strSort(s)].push_back(s);
        }
        vector<vector<string>> anagrams;
        for (auto p : mp) { 
            anagrams.push_back(p.second);
        }
        return anagrams;
    }
private:
    string strSort(string s) {
        int counter[26] = {0};//not vector, but same as vector
        for (char c : s) {
            counter[c - 'a']++;
        }
        string t;
        for (int c = 0; c < 26; c++) {
            t += string(counter[c], c + 'a');
        }
        return t;
    }
};
...............

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> m;
        for (auto& s : strs) {
            int f[26] = {0};
            for (auto c : s) {
                f[c-'a']++;
            }
            //sorted word
            string encoded = "";
            for (int i = 0; i < 26; ++i) {
                
                while (f[i]--)
                    encoded += ('a'+i);
                
                
            }
            
            m[encoded].push_back(s);
        }
        vector<vector<string>> res;
        for (auto& v : m) res.push_back(v.second);
        return res;
    }
};


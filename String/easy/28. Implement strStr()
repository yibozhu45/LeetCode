class Solution {
public:
    int strStr(string haystack, string needle) {
        if(needle.size() == 0) return 0;
        if(haystack.size() < needle.size()) return -1;
        int i = 0, j = 0;
        int index = 0;
        while(i < haystack.size())
        {
            if(haystack[i] == needle[j])
            {
                index = i;
                while(j < needle.size())
                {
                    if(haystack[i] != needle[j])
                    {
                        j = 0;
                        break;
                    }
                    else
                    {
                        j++;
                        i++;
                    }
                }
                if(j == needle.size())
                {
                    return index;
                }
                i = index;
            }
            i++;
        }
        return -1;
    }
};

*clear vision*

class Solution {
public:
    int strStr(string haystack, string needle) {
        int m = haystack.size(), n = needle.size();
        if(needle.size() == 0) return 0;
        for (int i = 0; i <= m - n; i++) {
            int j = 0;
            for (; j < n; j++) {
                if (haystack[i + j] != needle[j]) {
                    break;
                }
            }
            if (j == n) {
                return i;
            }
        }
        return -1;
    }
};
....................................................
Substring function

class Solution {
public:
    int strStr(string haystack, string needle) {
        int m = haystack.size(), n = needle.size();
        
        if(needle.size() == 0) return 0;
        
        for (int i = 0; i <= m - n; i++) {
            //cout << haystack.substr(i, i+n) << " ";
            if(haystack.substr(i, n) == needle)
            {
                return i;
            }
        }
        return -1;
    }
};
.....................................................
KMP algorithm

http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/
KMP Algorithm for Pattern Searching

class Solution {
public:
    int strStr(string haystack, string needle) {
        int m = haystack.size(), n = needle.size();
        if (!n) {
            return 0;
        }
        vector<int> lps = kmpProcess(needle);
        for (int i = 0, j = 0; i < m;) {
            if (haystack[i] == needle[j]) { 
                i++, j++;
            }
            if (j == n) {
                return i - j;
            }
            if (i < m && haystack[i] != needle[j]) {
                j ? j = lps[j - 1] : i++;
            }
        }
        return -1;
    }
private:
    vector<int> kmpProcess(string needle) {
        int n = needle.size();
        vector<int> lps(n, 0);
        for (int i = 1, len = 0; i < n;) {
            if (needle[i] == needle[len]) {
                lps[i++] = ++len;
            } else if (len) {
                len = lps[len - 1];
            } else {
                lps[i++] = 0;
            }
        }
        return lps;
    }
};

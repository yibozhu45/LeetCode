
Initialize a two-dimensional vector in C++

https://www.techiedelight.com/initialize-two-dimensional-vector-cpp/

1.
std::vector<std::vector<int>> matrix(M, std::vector<int>(N, default_value));

2. push_back() function--push_back(vector)
#include <iostream>
#include <vector>

#define M 3
#define N 4

int main()
{
	// specify default value to fill the vector elements
	int default_value = 1;

	// instantiate vector object of type std::vector<int> and
	// use push_back() function to resize it
	std::vector<std::vector<int>> matrix;
	for (int i = 0; i < M; i++)
	{
		// construct a vector of ints with given default value
		std::vector<int> v;
		for (int j = 0; j < N; j++)
			v.push_back(default_value);

		// push back above one-dimensional vector
		matrix.push_back(v);
	}

	// print the two-dimensional vector

	return 0;
}
///////////////////////////////////////////////////////////////////////////////////
Vector partial_sort

https://www.geeksforgeeks.org/stdpartial_sort-in-cpp/
//////////////////////////////////////////////////////////////////////////////////
Swap values in vector:
https://stackoverflow.com/questions/6224830/c-trying-to-swap-values-in-a-vector

We can swap based on the objects contents:
std::swap(v[0],v[1]);

Or swap based on the underlying iterator:
std::iter_swap(v.begin(),v.begin()+1);
//////////////////////////////////////////////////////////////////////////////////
Difference between std::remove and vector::erase for vectors
https://www.geeksforgeeks.org/difference-between-stdremove-and-vectorerase-for-vectors/

std::remove : It doesnâ€™t actually delete elements from the container but only shunts non-deleted elements forwards on top of deleted elements.

vector::erase : Removes from the vector either a single element (position) or a range of elements ([first, last)).

Erasing an element in a vector is O(n) since once you remove the element you still need to shift all successive elements to fill the gap created. If a vector has n elements, then at the worst case you will need to shift n-1 elemets, hence the complexity is O(n).

//////////////////////////////////////////////////////////////////////////////////
Erase vector element by value

1.
#include <algorithm>
...
vec.erase(std::remove(vec.begin(), vec.end(), 8), vec.end());

(You can not do that directly. You need to use std::remove algorithm to move the element to be erased to the end of the vector and then use erase function. Something like: myVector.erase(std::remove(myVector.begin(), myVector.end(), 8), myVec.end());. See this erasing elements from vector for more details.)

2.
You can use std::find to get an iterator to a value:
#include <algorithm>
std::vector<int>::iterator position = std::find(myVector.begin(), myVector.end(), 8);
if (position != myVector.end()) // == myVector.end() means the element was not found
    myVector.erase(position);
///////////////////////////////////////////////////////////////////////////////////
// Create a vector of size n with 
// all values as 10. 
    vector<int> vect(n, 10);

Q1:
vector<int> nums;
nums[0] = 12; // EXC_BAD_ASSESS

Solution:
1. vector<int> nums;
   nums.push_back(12);

2. vector<int> nums(10);
   nums[0] = 12;
////////////////////////////////////////////////////////////////////////////////////
Example1:
#include <iostream>

int main() {
    // 1. initialize
    vector<int> v0;
    vector<int> v1(5, 0);
    // 2. make a copy
    vector<int> v2(v1.begin(), v1.end());
    vector<int> v3(v2);
    // 2. cast an array to a vector
    int a[5] = {0, 1, 2, 3, 4};
    vector<int> v4(a, *(&a + 1));
    // 3. get length
    cout << "The size of v4 is: " << v4.size() << endl;
    // 4. access element
    cout << "The first element in v4 is: " << v4[0] << endl;
    // 5. iterate the vector
    cout << "[Version 1] The contents of v4 are:";
    for (int i = 0; i < v4.size(); ++i) {
        cout << " " << v4[i];
    }
    cout << endl;
    cout << "[Version 2] The contents of v4 are:";
    for (int& item : v4) {
        cout << " " << item;
    }
    cout << endl;
    cout << "[Version 3] The contents of v4 are:";
    //item is iterator
    for (auto item = v4.begin(); item != v4.end(); ++item) {
        cout << " " << *item;
    }
    cout << endl;
    // 6. modify element
    v4[0] = 5;
    // 7. sort
    sort(v4.begin(), v4.end());
    // 8. add new element at the end of the vector
    v4.push_back(-1);
    // 9. delete the last element
    v4.pop_back();
}
///////////////////////////////////////////////////////////////////////////////////
Complicated example2:

note:
When use vector with structure object, you can't push back single member but should to push back a complete object.
Eg: vector<Movie> movies;
    movies.push_back(m);//not m.title or m.year;

///////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
using namespace std;

struct Movie
{
    string title;
    int year;
};

int main()
{
    vector<Movie> movie;
    char choice = 'y';
    while(choice == 'y')
    {
        Movie m;
        cout << "Title: ";
        cin >> m.title;
        cout << "Year: ";
        cin >> m.year;
        cout << endl;
        movie.push_back(m);
        
        cout << "Enter?";
        cin >> choice;
    }
    
    cout << left << setw(30) << "Title" << setw(10) << "Year" << endl;
    for(Movie m : movie)
    {
        cout << setw(30) << m.title << setw(10) << m.year << endl;
        
    }

}
///////////////////////////////////////////////////////
struct with vector:
#include<iostream>
#include<string>
#include<vector>
using namespace std;

struct Movie
{
    string title;
    int year;
    int star;
    
};

void display(vector<Movie> m)
{
    for (Movie movie : m)
    {
        cout << movie.title << "    " << movie.year << "    " << movie.star << endl;
    }
}

 void addMovie(vector<Movie>& m)
{
    Movie movie;
    cout << "Title: ";
    getline(cin, movie.title);
    cout << "Year: ";
    cin >> movie.year;
    cout << "Stars: ";
    cin >> movie.star;
    m.push_back(movie);
}

void deleteMovie(vector<Movie>& m, int number)
{
    m.erase(m.begin() + number - 1);
}
int main()
{
    vector<Movie> movies;
    Movie m;
    m = {"Casablanca", 1942, 5};
    movies.push_back(m);
    m = {"Wonder Woman", 2017,4};
    movies.push_back(m);
    display(movies);
    addMovie(movies);
    display(movies);
    
    int number;
    cout << "Which movie you want to delete?";
    cin >> number;
    deleteMovie(movies, number);
    display(movies);
}

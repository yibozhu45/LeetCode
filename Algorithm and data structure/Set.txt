Sets are a type of associative containers in which each element has to be unique, because the value of the element identifies it. The value of the element cannot be modified once it is added to the set, though it is possible to remove and add the modified value of that element.

begin() – Returns an iterator to the first element in the set.
end() – Returns an iterator to the theoretical element that follows last element in the set.
size() – Returns the number of elements in the set.
max_size() – Returns the maximum number of elements that the set can hold.
empty() – Returns whether the set is empty.

#include <iostream> 
#include <set> 
#include <iterator> 

using namespace std; 

int main() 
{ 
	// empty set container 
	set <int, greater <int> > s1;		 

	// insert elements in random order 
	s1.insert(40); 
	s1.insert(30); 
	s1.insert(60); 
	s1.insert(20); 
	s1.insert(50); 
	s1.insert(50); // only one 50 will be added to the set 
	s1.insert(10); 

	// printing set s1 
	set <int, greater <int> > :: iterator itr; 
	cout << "\nThe set s1 is : "; 
	for (itr = s1.begin(); itr != s1.end(); ++itr) 
	{ 
		cout << '\t' << *itr; 
	} 
	cout << endl; 

	// assigning the elements from s1 to s2 
	set <int> s2(s1.begin(), s1.end()); 

	// print all elements of the set s2 
	cout << "\nThe set s2 after assign from s1 is : "; 
	for (itr = s2.begin(); itr != s2.end(); ++itr) 
	{ 
		cout << '\t' << *itr; 
	} 
	cout << endl; 

	// remove all elements up to 30 in s2 
	cout << "\ns2 after removal of elements less than 30 : "; 
	s2.erase(s2.begin(), s2.find(30)); 
	for (itr = s2.begin(); itr != s2.end(); ++itr) 
	{ 
		cout << '\t' << *itr; 
	} 

	// remove element with value 50 in s2 
	int num; 
	num = s2.erase (50); 
	cout << "\ns2.erase(50) : "; 
	cout << num << " removed \t" ; 
	for (itr = s2.begin(); itr != s2.end(); ++itr) 
	{ 
		cout << '\t' << *itr; 
	} 

	return 0; 

} 

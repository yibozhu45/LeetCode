First-in-first-out (FIFO) in a queue.

The insert operation is also called enqueue and the new element is always added at the end of the queue. 
The delete operation is called dequeue. You are only allowed to remove the first element.

To implement a queue, we may use a dynamic array and an index pointing to the head of the queue.
#include <iostream>

class MyQueue {
    private:
        // store elements
        vector<int> data;       
        // a pointer to indicate the start position
        int p_start;            
    public:
        MyQueue() {p_start = 0;}
        /** Insert an element into the queue. Return true if the operation is successful. */
        bool enQueue(int x) {
            data.push_back(x);
            return true;
        }
        /** Delete an element from the queue. Return true if the operation is successful. */
        bool deQueue() {
            if (isEmpty()) {
                return false;
            }
            p_start++;
            return true;
        };
        /** Get the front item from the queue. */
        int Front() {
            return data[p_start];
        };
        /** Checks whether the queue is empty or not. */
        bool isEmpty()  {
            return p_start >= data.size();
        }
};

int main() {
    MyQueue q;
    q.enQueue(5);
    q.enQueue(3);
    if (!q.isEmpty()) {
        cout << q.Front() << endl;
    }
    q.deQueue();
    if (!q.isEmpty()) {
        cout << q.Front() << endl;
    }
    q.deQueue();
    if (!q.isEmpty()) {
        cout << q.Front() << endl;
    }
}
................................................
C++ standard library

#include <iostream>

int main() {
    // 1. Initialize a queue.
    queue<int> q;
    // 2. Push new element.
    q.push(5);
    q.push(13);
    q.push(8);
    q.push(6);
    // 3. Check if queue is empty.
    if (q.empty()) {
        cout << "Queue is empty!" << endl;
        return 0;
    }
    // 4. Pop an element.
    q.pop();
    // 5. Get the first element.
    cout << "The first element is: " << q.front() << endl;
    // 6. Get the last element.
    cout << "The last element is: " << q.back() << endl;
    // 7. Get the size of the queue.
    cout << "The size is: " << q.size() << endl;
}
And remember when you want to process the elements in order, using a queue might be a good choice.
.............................................................................................................................
deque is a container template. It satisfies the requirements for a sequence with random-access iterators, much like a vector.
A deque is a double-ended queue, which allows easy insertion/removal from either end.

Queues only allow insertion in one end and retrieval from the other.
Queue is not a container at all, it is an adaptor. It contains a container and provides a different, more specific interface. 
Use queue when you want to remember (or remind) to avoid operations besides push[_back] and pop[_front], front and back, size 
and empty. You can't look at elements inside the queue besides the first and last, at all! Queue doesn't have iterator built 
inside.
.............................................................................................................................
Two main scenarios of using BFS: do traversal or find the shortest path. Typically, it happens in a tree or a graph. 
It will be important to determine the nodes and the edges before doing BFS in a specific question.

Queue and BFS
One common application of Breadth-first Search (BFS) is to find the shortest path from the root node to the target node. 

1. What is the processing order of the nodes?

In the first round, we process the root node. In the second round, we process the nodes next to the root node; in the third round, 
we process the nodes which are two steps from the root node; so on and so forth.

Similar to tree's level-order traversal, the nodes closer to the root node will be traversed earlier.

If a node X is added to the queue in the kth round, the length of the shortest path between the root node and X is exactly k. 
That is to say, you are already in the shortest path the first time you find the target node. Because, the processing order of the nodes is 
the exact same order as how they were added to the queue, which is First-in-First-out (FIFO). That's why we use a queue in BFS.

Tamplate I:
/**
 * Return the length of the shortest path between root and target node.
 */
int BFS(Node root, Node target) {
    Queue<Node> queue;  // store all nodes which are waiting to be processed
    int step = 0;       // number of steps neeeded from root to current node
    // initialize
    add root to queue;
    // BFS
    while (queue is not empty) {
        step = step + 1;
        // iterate the nodes which are already in the queue
        int size = queue.size();
        for (int i = 0; i < size; ++i) {
            Node cur = the first node in queue;
            return step if cur is target;
            for (Node next : the neighbors of cur) {
                add next to queue;
            }
            remove the first node from queue;
        }
    }
    return -1;          // there is no path from root to target
}
1. As shown in the code, in each round, the nodes in the queue are the nodes which are waiting to be processed.
2. After each outer while loop, we are one step farther from the root node. The variable step indicates the distance from the root node
and the current node we are visiting.

Template II:
Sometimes, it is important to make sure that we never visit a node twice. Otherwise, we might get stuck in an infinite loop, 
e.g. in graph with cycle. If so, we can add a hash set to the code above to solve this problem. 

/**
 * Return the length of the shortest path between root and target node.
 */
int BFS(Node root, Node target) {
    Queue<Node> queue;  // store all nodes which are waiting to be processed
    Set<Node> visited;  // store all the nodes that we've visited
    int step = 0;       // number of steps neeeded from root to current node
    // initialize
    add root to queue;
    add root to visited;
    // BFS
    while (queue is not empty) {
        step = step + 1;
        // iterate the nodes which are already in the queue
        int size = queue.size();
        for (int i = 0; i < size; ++i) {
            Node cur = the first node in queue;
            return step if cur is target;
            for (Node next : the neighbors of cur) {
                if (next is not in used) {
                    add next to queue;
                    add next to visited;
                }
            }
            remove the first node from queue;
        }
    }
    return -1;          // there is no path from root to target
}

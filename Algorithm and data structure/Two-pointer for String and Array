#Two pointer doesn't mean the data type is pointer. It means  using the idea of pointer

In the previous chapter, we solve some problems by iterating the array. 
Typically, we only use one pointer starting from the first element and ending at the last one to do iteration. 
However, sometimes, we might need to use two pointers at the same time to do the iteration.

Eg: Reverse the elements in an array.
void reverse(int *v, int N) {
    int i = 0;
    int j = N - 1;
    while (i < j) {
        swap(v[i], v[j]);
        i++;
        j--;
    }
}

One of the typical scenarios to use two-pointer technique is that Iterate the array from two ends to the middle.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Use two pointers with different steps to solve problems: One slow-runner and one fast-runner at the same time.

For example:
Given an array and a value, remove all instances of that value in-place and return the new length.

int removeElement(vector<int>& nums, int val) {
    int k = 0;
    for (int i = 0; i < nums.size(); ++i) {
        if (nums[i] != val) {
            nums[k] = nums[i];
            ++k;
        }
    }
    return k;
}
We use two pointers, one faster-runner i and one slower-runner k, in the example above. 
i moves one step each time while k moves one step only if a new needed value is added.


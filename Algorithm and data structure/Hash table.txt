Hash Table is a data structure which organizes data using hash functions in order to support quick insertion and search.

There are two different kinds of hash tables: hash set and hash map.
  The hash set is one of the implementations of a set data structure to store no repeated values.
  The hash map is one of the implementations of a map data structure to store (key, value) pairs.
  
The Principle of Hash Table
  1. The key idea of Hash Table is to use a hash function to map keys to buckets. 
  
Hash Function
  1. The hash function is the most important component of a hash table which is used to map the key to a specific bucket. 
  2. The hash function will depend on the range of key values and the number of buckets.
     It is an open problem to design a hash function. The idea is to try to assign the key to the bucket as uniform as you can. Ideally, a perfect hash function will be a one-one mapping between the key and the bucket. However, in most cases a hash function is not perfect and it is a tradeoff between the amount of buckets and the capacity of a bucket.

Collision Resolution
  A collision resolution algorithm should solve the following questions:
    1. How to organize the values in the same bucket?
    2. What if too many values are assigned to the same bucket?
    3. How to search a target value in a specific bucket?
    
.........................................................................................................................
The hash set is one of the implementations of a set which is a data structure to store no repeated values. 

#include <unordered_set>                // 0. include the library

int main() {
    // 1. initialize a hash set
    unordered_set<int> hashset;   
    // 2. insert a new key
    hashset.insert(3);
    hashset.insert(2);
    hashset.insert(1);
    
    // 3. delete a key
    hashset.erase(2);
    
    // 4. check if the key is in the hash set
    if (hashset.count(2) <= 0) {
        cout << "Key 2 is not in the hash set." << endl;
    }
    
    // 5. get the size of the hash set
    cout << "The size of hash set is: " << hashset.size() << endl; 
    
    // 6. iterate the hash set
    for (auto it = hashset.begin(); it != hashset.end(); ++it) {
        cout << (*it) << " ";
    }
    cout << "are in the hash set." << endl;
    
    // 7. clear the hash set
    hashset.clear();
    
    // 8. check if the hash set is empty
    if (hashset.empty()) {
        cout << "hash set is empty now!" << endl;
    }
}

Hash set is used to check if a value has ever appeared or not.

You can simply iterate each value and insert the value into the set. If a value has already been in the hash set, 
there is a duplicate.
/*
 * Template for using hash set to find duplicates.
 */
bool findDuplicates(vector<Type>& keys) {
    // Replace Type with actual type of your key
    unordered_set<Type> hashset;
    for (Type key : keys) {
        if (hashset.count(key) > 0) {
            return true;
        }
        hashset.insert(key);
    }
    return false;
}
.........................................................................................
When the problem needs two "for" loop to solve, we can use hash table. 

In C++, map will work.
For example: we can put vector value and index in a map as mp<value, index>

map find() only can be used to find key, can't be used to find value.

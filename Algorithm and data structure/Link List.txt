The linked list is a linear data structure. Each element in the linked list is actually a separate object while all the objects are linked together by the reference field in each element.

Each node in a singly-linked list contains not only the value but also a reference field to link to the next node. By this way, the singly-linked list organizes all the nodes in a sequence.

In most cases, we will use the head node (the first node) to represent the whole list.

Unlike the array, we are not able to access a random element in a singly-linked list in constant time. If we want to get the ith element, we have to traverse from the head node one by one. It takes us O(N) time on average to visit an element by index, where N is the length of the linked list.

Insert a new node into a linked list in O(1) time complexity, which is very efficient.

The time complexity of deleting a node will be O(N). The space complexity is O(1) because we only need constant space to store our pointers.


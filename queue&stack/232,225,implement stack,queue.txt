232. Implement Queue using Stacks

2 Stacks:
class MyQueue {
public:
    stack<int> s;
    
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        s.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        stack<int> s1;
        int n;
        while(!s.empty())
        {
            n = s.top();
            s.pop();
            s1.push(n);
        }
        
        //pop the top element 
        int result = s1.top();
        s1.pop();
        while(!s1.empty())
        {
            n = s1.top();
            s1.pop();
            s.push(n);
        }
        
        return result;
        
    }
    
    /** Get the front element. */
    int peek() {
        stack<int> s1;
        int n;
        cout << s.size();
        while(!s.empty())
        {
            n = s.top();
            s.pop();
            s1.push(n);
        }
        int result = s1.top();
        while(!s1.empty())
        {
            n = s1.top();
            s1.pop();
            s.push(n);
        }
        return result;  
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return s.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
.................................................................
Implement Stack using Queues
class MyStack {
public:
    queue<int> q;
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        q.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        queue<int> q1;
        int n;
        while(q.size() != 1)
        {
            n = q.front();
            q.pop();
            q1.push(n);    
        }
        int result = q.front();
        q.pop();
        while(!q1.empty())
        {
            n = q1.front();
            q1.pop();
            q.push(n);
        }
        return result;
    }
    
    /** Get the top element. */
    int top() {
        queue<int> q1;
        int n;
        while(!q.empty())
        {
            n = q.front();
            q.pop();
            q1.push(n);
        }
        q = q1;
        return n;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();
    }
};
//when using int, consider overflow
............................................................
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
//when using int, consider overflow
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
       vector<int> vl1;
        while(l1 != NULL)
       {
           vl1.push_back(l1 -> val);
           l1 = l1 -> next;
       }
        
        vector<int> vl2;
        while(l2 != NULL)
        {
            vl2.push_back(l2 -> val);
            l2 = l2 -> next;
        }
        
        vector<int> res;
        int i = 0; int n = 0; int l = 0;
        while(i < vl1.size() && i < vl2.size())
        {
            n += vl1[i] + vl2[i];
            l = n % 10;
            res.push_back(l);
            n = (n -l) / 10;
            i++;
        }
        //leftover
        while(i < vl1.size())
        {
            n += vl1[i];
            l = n % 10;
            res.push_back(l);
            n = (n-l) /10;
            i++;
        }
        while(i < vl2.size())
        {
            n += vl2[i];
            l = n % 10;
            res.push_back(l);
            n = (n-l) /10;
            i++;
        }
        if(n != 0) res.push_back(n);
        
        cout << res.size();
        
        ListNode* head = new ListNode(0);
        ListNode* cur = head;
        
        for(int i = 0; i < res.size(); i++)
        {
            cur -> next = new ListNode(res[i]);
            cur = cur -> next;
        }
        return head -> next;
    }
};
............................................................
Advanced:
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(0);
        ListNode* ptr ;
        ptr = dummy;
        int carry=0;
        while(l1 && l2)
        {
            ptr->next = new ListNode();
            ptr=ptr->next;
            ptr->val = (l1->val+l2->val+carry)%10;
            carry = (l1->val+l2->val+carry)/10;
            l1=l1->next;
            l2=l2->next;
        }
        while(l1)
        {
            ptr->next = new ListNode();
            ptr=ptr->next;
            ptr->val = (l1->val+carry)%10;
            carry = (l1->val+carry)/10;
            l1=l1->next;
        }
        while(l2)
        {
            ptr->next = new ListNode();
            ptr=ptr->next;
            ptr->val = (l2->val+carry)%10;
            carry = (l2->val+carry)/10;
            l2=l2->next;
        }
        if(carry)
        {
            ptr->next = new ListNode();
            ptr=ptr->next;
            ptr->val = carry;
        }
        ptr->next=NULL;
        return dummy->next;
    }
};

idea 1: use vector to deal with the value first, then store the value in a new linked list

idea 2: split every element in l2, insert into l1
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* cur1 = l1;
        ListNode* cur2 = l2;
        
        if(l1 == NULL && l2 == NULL) return l1;
        else if(l1 != NULL && l2 == NULL) return l1;
        else if(l2 != NULL && l1 == NULL) return l2;
        
        while(l2!= NULL)
        {
            l2 = l2 -> next;
            cur2 -> next = NULL;
            
            //add to l1 head
            if(cur2 -> val < cur1 -> val)
            {
                cur2 -> next = cur1;
                cur1 = cur2;
                l1 = cur1;
            }
            else
            {
            //add to middle of l1
            bool flag = false;
            while(l1 -> next != NULL)
            {
                if(l1 -> next -> val >= cur2 -> val )
                {
                    cur2 -> next = l1 -> next;
                    l1 -> next = cur2;
                    flag = true;
                    break;
                }
                l1 = l1 -> next;
            }
            
            if(flag)
            {
                l1 = cur1;
            }
            else
            {
                l1 -> next = cur2;
                l1 = cur1;
            }
            }
            cur2 = l2;
        }
        
        return cur1;
    }
};
....................................................................
idea 3: use one new node to re-organize l1 and l2

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* prehead = new ListNode(-1);
        ListNode* node = prehead;
        while (l1 and l2) {
            ListNode* chosen_node = nullptr;
            
            if (l1 -> val < l2 -> val) {
                node -> next = l1;
                l1 = l1 -> next;
            } else {
                node -> next = l2;
                l2 = l2 -> next;
            }
            node = node -> next;
        }
        node -> next = (l1)? l1 : l2;
        
        auto result = prehead->next;
        delete prehead;
        return result;
    }
};
